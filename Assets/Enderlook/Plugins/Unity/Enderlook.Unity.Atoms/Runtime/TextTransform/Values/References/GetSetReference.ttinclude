<#+
    void WriteGetSetReference(string name, string dataType)
    {
        WriteHeader();
#>
using Enderlook.Exceptions;
using Enderlook.Unity.Attributes;

using System;

using UnityEngine;
<#+
        WriteNamespace();
#>
    [Serializable]
    public class <#= name #>GetSetReference : BaseValueReference, I<#= name #>GetSet
    {
#pragma warning disable CS0649
        [SerializeField, PropertyPopupOption((int)ReferenceMode.Inline)]
        private <#= dataType #> inline;

        [SerializeField, PropertyPopupOption((int)ReferenceMode.ScriptableObject)]
        private <#= name #>GetSetSO scriptableObject;

        [SerializeField, PropertyPopupOption((int)ReferenceMode.Component)]
        private <#= name #>GetSetComponent component;
#pragma warning restore CS0649

        public <#= dataType #> InitialValue {
            get {
                switch (Mode)
                {
                    case ReferenceMode.Inline:
                        return inline;
                    case ReferenceMode.ScriptableObject:
                        return scriptableObject.GetValue();
                    case ReferenceMode.Component:
                        return component.GetValue();
                    default:
                        throw new ImpossibleStateException();
                }
            }
        }

        /// <inheritdoc cref="Utils.Interfaces.IGet{T}.GetValue"/>
        public <#= dataType #> GetValue()
        {
            switch (Mode)
            {
                case ReferenceMode.Inline:
                    return inline;
                case ReferenceMode.ScriptableObject:
                    return scriptableObject.GetValue();
                case ReferenceMode.Component:
                    return component.GetValue();
                default:
                    throw new ImpossibleStateException();
            }
        }

        /// <inheritdoc cref="IGetSet{T}.SetValue"/>
        public void SetValue(<#= dataType #> newValue)
        {
            switch (Mode)
            {
                case ReferenceMode.Inline:
                    inline = newValue;
                    break;
                case ReferenceMode.ScriptableObject:
                    scriptableObject.SetValue(newValue);
                    break;
                case ReferenceMode.Component:
                    component.SetValue(newValue);
                    break;
                default:
                    throw new ImpossibleStateException();
            }
        }

        /// <summary>
        <#= "///" #> Creates an <see cref="<#= name #>GetReference"/> of mode <see cref="BaseValueReference.ReferenceMode.Inline"/>.
        /// </summary>
        /// <param name="value">Value to store.</param>
        public <#= name #>GetSetReference(<#= dataType #> value)
        {
            Mode = ReferenceMode.Inline;
            inline = value;
        }

        /// <summary>
        <#= "///" #> Creates an <see cref="<#= name #>GetSetReference"/> of mode <see cref="BaseValueReference.ReferenceMode.ScriptableObject"/>.
        /// </summary>
        <#= "///" #> <param name="value"><see cref="<#= name #>GetSetSO"/> to store.</param>
        public <#= name #>GetSetReference(<#= name #>GetSetSO value)
        {
            Mode = ReferenceMode.ScriptableObject;
            scriptableObject = value;
        }

        /// <summary>
        <#= "///" #> Creates an <see cref="<#= name #>GetSetComponent"/> of mode <see cref="BaseValueReference.ReferenceMode.Component"/>.
        /// </summary>
        <#= "///" #> <param name="value"><see cref="<#= name #>GetSetComponent"/> to store.</param>
        public <#= name #>GetSetReference(<#= name #>GetSetComponent value)
        {
            Mode = ReferenceMode.ScriptableObject;
            component = value;
        }

        /// <summary>
        /// Extract the stored value from <see cref="GetValue"/>.
        /// </summary>
        /// <param name="instance">Instance where value will be get.</param>
        public static implicit operator <#= dataType #>(<#= name #>GetSetReference instance) => instance.GetValue();
    }
<#+
        SaveOutput(name + "GetSetReference", "Values/References");
    }
#>