<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enderlook.Extensions</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.CastExtensions.TryCast``1(System.Object,``0@)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.CastExtensions.CastOrDefault``1(System.Object)" -->
        <member name="T:Enderlook.Extensions.CastExtensions.RequireStruct`1">
            <summary>
            Don't use me.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Enderlook.Extensions.CastExtensions.RequireClass`1">
            <summary>
            Don't use me.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Enderlook.Extensions.CastExtensions.CastOrNull``1(System.Object,Enderlook.Extensions.CastExtensions.RequireStruct{``0})">
            <summary>
            Try to cast <paramref name="obj"/> into <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to cast.</typeparam>
            <param name="obj"><see cref="T:System.Object"/> to cast.</param>
            <param name="ignoreMe">Ignore this. Don't put anything here.</param>
            <returns>Return <c>(<typeparamref name="T"/>)<paramref name="obj"/></c>. <see langword="null"/> if it can't cast.</returns>
            <seealso href="https://stackoverflow.com/questions/2974519/generic-constraints-where-t-struct-and-where-t-class"/>
            <seealso cref="M:Enderlook.Extensions.CastExtensions.TryCast``1(System.Object,``0@)"/>
            <seealso cref="M:Enderlook.Extensions.CastExtensions.CastOrDefault``1(System.Object)"/>
            <seealso cref="M:Enderlook.Extensions.CastExtensions.CastOrNull``1(System.Object,Enderlook.Extensions.CastExtensions.RequireClass{``0})"/>
        </member>
        <member name="M:Enderlook.Extensions.CastExtensions.CastOrNull``1(System.Object,Enderlook.Extensions.CastExtensions.RequireClass{``0})">
            <summary>
            Try to cast <paramref name="obj"/> into <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to cast.</typeparam>
            <param name="obj"><see cref="T:System.Object"/> to cast.</param>
            <param name="ignoreMe">Ignore this. Don't put anything here.</param>
            <returns>Return <c>(<typeparamref name="T"/>)<paramref name="obj"/></c>. <see langword="null"/> if it can't cast.</returns>
            <seealso href="https://stackoverflow.com/questions/2974519/generic-constraints-where-t-struct-and-where-t-class"/>
            <seealso cref="M:Enderlook.Extensions.CastExtensions.TryCast``1(System.Object,``0@)"/>
            <seealso cref="M:Enderlook.Extensions.CastExtensions.CastOrDefault``1(System.Object)"/>
            <seealso cref="M:Enderlook.Extensions.CastExtensions.CastOrNull``1(System.Object,Enderlook.Extensions.CastExtensions.RequireStruct{``0})"/>
        </member>
        <member name="M:Enderlook.Extensions.CastExtensions.IsCastableTo(System.Type,System.Type)">
            <summary>
            Determines if <paramref name="from"/> is castable to <paramref name="to"/>.
            This method does more than the is-operator and allows for primitives and implicit/explicit conversions to be compared properly.
            </summary>
            <param name="from">The type to cast from.</param>
            <param name="to">The type to be casted to.</param>
            <returns><see langword="true"/> if <paramref name="from"/> can be casted to <paramref name="to"/>. <see langword="false"/> otherwise.</returns>
            <see cref="!:https://stackoverflow.com/questions/18256742/c-sharp-is-operator-check-castability-for-all-conversions-available"/>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="from"/> or <paramref name="to"/> are <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Extensions.CastExtensions.IsCastableTo``1(System.Type)">
            <summary>
            Determines if <paramref name="from"/> is castable to <typeparamref name="T"/>.
            This method does more than the is-operator and allows for primitives and implicit/explicit conversions to be compared properly.
            </summary>
            <typeparam name="T">The type to be casted to.</typeparam>
            <param name="from">The type to cast from.</param>
            <returns><see langword="true"/> if <paramref name="from"/> can be casted to <typeparamref name="T"/>. <see langword="false"/> otherwise.</returns>
            <see cref="!:https://stackoverflow.com/questions/18256742/c-sharp-is-operator-check-castability-for-all-conversions-available"/>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="from"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Enderlook.Extensions.CastExtensions.IsCastableTo``2">
            <summary>
            Determines if <typeparamref name="T"/> is castable to <typeparamref name="U"/>.
            This method does more than the is-operator and allows for primitives and implicit/explicit conversions to be compared properly.
            </summary>
            <typeparam name="T">The type to cast from.</typeparam>
            <typeparam name="U">The type to be casted to.</typeparam>
            <returns><see langword="true"/> if <paramref name="from"/> can be casted to <typeparamref name="T"/>. <see langword="false"/> otherwise.</returns>
            <see cref="!:https://stackoverflow.com/questions/18256742/c-sharp-is-operator-check-castability-for-all-conversions-available"/>
        </member>
        <member name="M:Enderlook.Extensions.ArrayExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
        </member>
        <member name="M:Enderlook.Extensions.ArrayExtensions.ChangeEach``1(``0[],System.Func{``0,``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="function"/></param>
            <param name="function">Function to perform on each element of <paramref name="source"/></param>
            <returns>Updated <paramref name="source"/>.</returns>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.BinarySearchExtensions.BinarySearchFirst``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.BinarySearchExtensions.BinarySearchFirst``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.BinarySearchExtensions.BinarySearchFirst``1(``0[],``0,System.Collections.Generic.IComparer{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.BinarySearchExtensions.BinarySearchFirst``1(``0[],``0,System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})" -->
        <member name="M:Enderlook.Extensions.BinarySearchExtensions.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches the entire sorted <see cref="T:System.Collections.Generic.IList`1"/> for <paramref name="item"/> and returns the zero-based index of the element.
            </summary>
            <typeparam name="T">Type of <paramref name="item"/>.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where <paramref name="item"/> will be looked for.</param>
            <param name="item">Element to look for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements. Use <see langword="null"/> to use <see cref="P:System.Collections.Generic.Comparer`1.Default"/>.</param>
            <returns>The zero-based index of item in the sorted <see cref="T:System.Collections.Generic.IList`1"/>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.BinarySearchExtensions.BinarySearchFirst``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})" -->
        <member name="M:Enderlook.Extensions.CollectionExtensions.PushRange``1(System.Collections.Generic.Stack{``0},``0[])">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Extensions.CollectionExtensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of elements in <paramref name="source"/>.</typeparam>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Extensions.CollectionExtensions.PushRange(System.Collections.Stack,System.Object[])">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Extensions.CollectionExtensions.PushRange(System.Collections.Stack,System.Collections.IEnumerable)">
            <summary>
            Push elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be pushed.</param>
            <param name="values">Elements to push.</param>
        </member>
        <member name="M:Enderlook.Extensions.CollectionExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enqueue elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be enqueue.</param>
            <param name="values">Elements to enqueue.</param>
        </member>
        <member name="M:Enderlook.Extensions.CollectionExtensions.EnqueueRange(System.Collections.Queue,System.Collections.IEnumerable)">
            <summary>
            Enqueue elements from <paramref name="values"/> into <paramref name="source"/>.
            </summary>
            <param name="source">Where elements will be enqueue.</param>
            <param name="values">Elements to enqueue.</param>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Removes an element from a list if matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <param name="ascendOrder">Whenever it must remove in ascending or descending order.</param>
            <param name="removeAmount">Amount of items which must the criteria must be removed. If 0, remove all the matched elements.</param>
            <returns><paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveFirstBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Removes the fist(s) element(s) from a list which matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <param name="removeAmount">Amount of items which must the criteria must be removed. Value can't be 0.</param>
            <returns><paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveLastBy``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
            Removes the last(s) element(s) from a list which matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <param name="removeAmount">Amount of items which must the criteria must be removed. Value can't be 0.</param>
            <returns><paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveByAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all the elements from a list which matches a criteria determined by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">List to remove item.</param>
            <param name="selector">Function to determine if the item must be removed.</param>
            <returns><paramref name="source"/>.</returns>
            <see cref="!:RemoveBy&lt;T&gt;(List&lt;T&gt;, Func&lt;T, bool&gt;, bool, int)"/>
            <seealso cref="!:RemoveFirstBy&lt;T&gt;(List&lt;T&gt;, Func&lt;T, bool&gt;, int)"/>
            <seealso cref="!:RemoveLastBy&lt;T&gt;(List&lt;T&gt;, Func&lt;T, bool&gt;, int)"/>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.ChangeEach``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="function"/></param>
            <param name="function">Function to perform on each element of <paramref name="source"/></param>
            <returns>Updated <paramref name="source"/>.</returns>
            <seealso cref="M:System.Array.ForEach``1(``0[],System.Action{``0})"/>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.PopFirst``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and returns the element at the begging of <paramref name="source"/>.<br/>
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <returns>Element removed from the begging of <paramref name="source"/>.</returns>
            <remarks>This is an O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.TryPopFirst``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Try to remove and return the element at the begging of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <param name="element">Element removed from the begging of <paramref name="source"/>, if return is <see langword="true"/></param>
            <returns>Whenever an element was removed or not (<paramref name="source"/> is empty).</returns>
            <remarks>This is an O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.PopLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove and returns the element at the end of <paramref name="source"/>.<br/>
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <returns>Element removed from the end of <paramref name="source"/>.</returns>
            <remarks>This is an O(1) amortized O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.TryPopLast``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            Try to remove and return the element at the end of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of element to remove.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where element is taken.</param>
            <param name="element">Element removed from the end of <paramref name="source"/>, if return is <see langword="true"/></param>
            <returns>Whenever an element was removed or not (<paramref name="source"/> is empty).</returns>
            <remarks>This is an O(1) amortized O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.AddFirst``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Add <paramref name="element"/> at begging of <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of element to add.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are added.</param>
            <param name="element">Element to add at begging of <paramref name="source"/>.</param>
            <remarks>This is an O(n) operation.</remarks>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveAtOrdered``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Remove several elements from <see cref="!:source"/> at indexes <paramref name="indexes"/>.<br/>
            Indexes must be sorted from lowest to higher or undefined behavior will happen.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveAtOrdered``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
            Remove several elements from <see cref="!:source"/> at indexes <paramref name="indexes"/>.<br/>
            Indexes must be sorted from lowest to higher or undefined behavior will happen.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
            Remove several elements from <see cref="!:source"/> at indexes <paramref name="indexes"/>.
            <paramref name="indexes"/> become ordered after executing this method.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Extensions.IListExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Remove several elements from <see cref="!:source"/> at indexes <paramref name="indexes"/>.<br/>
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.IList`1"/> where elements are removed.</param>
            <param name="indexes">Indexes to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the last element of <paramref name="indexes"/> (the highest) is greater or equal than <paramref name="source"/> <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableAggregateExtensions.AggregateWhile``1(System.Collections.Generic.IEnumerable{``0},Enderlook.Extensions.IEnumerableAggregateExtensions.AggregatorWhile{``0})">
            <summary>
            Applies <paramref name="func"/> over the elements of the sequence carrying the last result until it returns <see langword="false"/>.
            </summary>
            <typeparam name="TSource">Type of element in <paramref name="source"/>.</typeparam>
            <param name="source">Sequence which elements will be applied to <paramref name="func"/>.</param>
            <param name="func">Method applied to elements of <paramref name="source"/>. If it returns <see cref="!:false"/> it stop.</param>
            <returns>The last result of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableAggregateExtensions.AggregateWhile``1(System.Collections.Generic.IEnumerable{``0},``0,Enderlook.Extensions.IEnumerableAggregateExtensions.AggregatorWhile{``0})">
            <summary>
            Applies <paramref name="func"/> over the elements of the sequence carrying the last result until it returns <see langword="false"/>.
            </summary>
            <typeparam name="TSource">Type of element in <paramref name="source"/>.</typeparam>
            <param name="source">Sequence which elements will be applied to <paramref name="func"/>.</param>
            <param name="seed">Initial value.</param>
            <param name="func">Method applied to elements of <paramref name="source"/>. If it returns <see cref="!:false"/> it stop.</param>
            <returns>The last result of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableAggregateExtensions.AggregateWhile``2(System.Collections.Generic.IEnumerable{``0},``1,Enderlook.Extensions.IEnumerableAggregateExtensions.AggregatorWhile{``0,``1})">
            <summary>
            Applies <paramref name="func"/> over the elements of the sequence carrying the last result until it returns <see langword="false"/>.
            </summary>
            <typeparam name="TSource">Type of element in <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">Type of the accumulated value.</typeparam>
            <param name="source">Sequence which elements will be applied to <paramref name="func"/>.</param>
            <param name="seed">Initial value.</param>
            <param name="func">Method applied to elements of <paramref name="source"/>. If it returns <see cref="!:false"/> it stop.</param>
            <returns>Result of <paramref name="resultSelector"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableAggregateExtensions.AggregateWhile``3(System.Collections.Generic.IEnumerable{``0},``1,Enderlook.Extensions.IEnumerableAggregateExtensions.AggregatorWhile{``0,``1},System.Func{``1,``2})">
            <summary>
            Applies <paramref name="func"/> over the elements of the sequence carrying the last result until it returns <see langword="false"/>.
            </summary>
            <typeparam name="TSource">Type of element in <paramref name="source"/>.</typeparam>
            <typeparam name="TAccumulate">Type of the accumulated value.</typeparam>
            <typeparam name="TResult">Type of the result value.</typeparam>
            <param name="source">Sequence which elements will be applied to <paramref name="func"/>.</param>
            <param name="seed">Initial value.</param>
            <param name="func">Method applied to elements of <paramref name="source"/>. If it returns <see cref="!:false"/> it stop.</param>
            <param name="resultSelector">Function which transform the last result of <paramref name="func"/> into the result value.</param>
            <returns>Result of <paramref name="resultSelector"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableExtensions.AtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Check if <paramref name="source"/> has at least <paramref name="count"/> elements.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to check for amount.</param>
            <param name="count">Minimal amount required.</param>
            <returns>Whenever it has at least <paramref name="count"/> elements.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableExtensions.Has``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Check if <paramref name="source"/> has exactly <paramref name="count"/> elements.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to check for amount.</param>
            <param name="count">Amount that must have.</param>
            <returns>Whenever it has exactly <paramref name="count"/> elements.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.IEnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})" -->
        <member name="M:Enderlook.Extensions.IEnumerableExtensions.ContainsBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Check if the <paramref name="source"/> contains an elements which match the given criteria by <paramref name="selector"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for a matching element.</param>
            <param name="selector">Check if the element match the criteria.</param>
            <returns>Whenever the matched item was found or not.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Return the element which the highest property returned by <paramref name="selector"/>, using <paramref name="comparer"/>.
            </summary>
            <typeparam name="TSource">Type the of the <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">Type returned by the <paramref name="selector"/>.</typeparam>
            <param name="source"><seealso cref="T:System.Collections.Generic.IEnumerable`1"/> to get the highest value.</param>
            <param name="selector">Function which provides the property to compare.</param>
            <param name="comparer">Comparer used to compare the values returned by <paramref name="selector"/>.</param>
            <returns>The element with the highest property.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Return the element which the lowest property returned by <paramref name="selector"/>, using <paramref name="comparer"/>.
            </summary>
            <typeparam name="TSource">Type the of the <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">Type returned by the <paramref name="selector"/>.</typeparam>
            <param name="source"><seealso cref="T:System.Collections.Generic.IEnumerable`1"/> to get the lowest value.</param>
            <param name="selector">Function which provides the property to compare.</param>
            <param name="comparer">Comparer used to compare the values returned by <paramref name="selector"/>.</param>
            <returns>The element with the lowest property.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified <paramref name="action"/> on each element of the <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for element to perform the <paramref name="action"/></param>
            <param name="action">Action to perform on each element of <paramref name="source"/></param>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableRandomExtensions.RandomPick``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random element from <paramref name="source"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for a random element.</param>
            <returns>Random element from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableRandomExtensions.RandomPickWeighted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Returns a random element from <paramref name="source"/> taking into account its weight from <paramref name="weigths"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for a random element.</param>
            <param name="weigths">Weight of each element.</param>
            <returns>Random element from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableRandomExtensions.RandomPickWeighted``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Returns a random element from <paramref name="source"/> taking into account its weight produced by <paramref name="weighter"/>.
            </summary>
            <typeparam name="T">Type of the element inside <paramref name="source"/>.</typeparam>
            <param name="source">Source to look for a random element.</param>
            <param name="weighter">Produce weight of elements.</param>
            <returns>Random element from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <paramref name="source"/>.
            </summary>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.KeyValuePair`2"/>s used to generate the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> from <paramref name="source"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.IEnumerableToExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.IEnumerableToExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})" -->
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
            Create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> generated by <paramref name="predicate"/> using values of <paramref name="source"/>.
            </summary>
            <typeparam name="TSource"><see cref="T:System.Type"/> of source.</typeparam>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.KeyValuePair`2"/>s used to generate the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="predicate">Generate <see cref="T:System.Collections.Generic.KeyValuePair`2"/> from values of <paramref name="source"/>.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> from <paramref name="source"/> generated by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{``1,``2}})">
            <summary>
            Create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from the <see cref="T:System.Tuple`2"/> generated by <paramref name="predicate"/> using values of <paramref name="source"/>.
            </summary>
            <typeparam name="TSource"><see cref="T:System.Type"/> of source.</typeparam>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.Tuple`2"/> used to generate the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="predicate">Generate <see cref="T:System.Tuple`2"/> from values of <paramref name="source"/>.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> from <paramref name="source"/> generated by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Create a <see cref="T:System.Collections.Generic.Dictionary`2"/> from the <see cref="T:System.ValueTuple`2"/> generated by <paramref name="predicate"/> using values of <paramref name="source"/>.
            </summary>
            <typeparam name="TSource"><see cref="T:System.Type"/> of source.</typeparam>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.ValueTuple`2"/> used to generate the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="predicate">Generate <see cref="T:System.ValueTuple`2"/> from values of <paramref name="source"/>.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> from <paramref name="source"/> generated by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToLookup``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Create a <see cref="T:System.Linq.ILookup`2"/> from the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of <paramref name="source"/>.
            </summary>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.KeyValuePair`2"/>s used to generate the <see cref="T:System.Linq.ILookup`2"/>.</param>
            <returns><see cref="T:System.Linq.ILookup`2"/> from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToLookup``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Create a <see cref="T:System.Linq.ILookup`2"/> from the <see cref="T:System.Tuple`2"/> of <paramref name="source"/>.
            </summary>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.Tuple`2"/>s used to generate the <see cref="T:System.Linq.ILookup`2"/>.</param>
            <returns><see cref="T:System.Linq.ILookup`2"/> from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToLookup``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Create a <see cref="T:System.Linq.ILookup`2"/> from the <see cref="T:System.ValueTuple`2"/> of <paramref name="source"/>.
            </summary>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <typeparam name="TValue"><see cref="T:System.Type"/> of value.</typeparam>
            <param name="source"><see cref="T:System.ValueTuple`2"/>s used to generate the <see cref="T:System.Linq.ILookup`2"/>.</param>
            <returns><see cref="T:System.Linq.ILookup`2"/> from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
            Create a <see cref="T:System.Linq.ILookup`2"/> from the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> generated by <paramref name="predicate"/> using values of <paramref name="source"/>..
            </summary>
            <typeparam name="TSource"><see cref="T:System.Type"/> of source.</typeparam>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <param name="source"><see cref="T:System.Collections.Generic.KeyValuePair`2"/>s used to generate the <see cref="T:System.Linq.ILookup`2"/>.</param>
            <param name="predicate">Generate <see cref="T:System.Collections.Generic.KeyValuePair`2"/> from values of <paramref name="source"/>.</param>
            <returns><see cref="T:System.Linq.ILookup`2"/> from <paramref name="source"/> generated by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Tuple{``1,``2}})">
            <summary>
            Create a <see cref="T:System.Linq.ILookup`2"/> from the <see cref="T:System.Tuple`2"/> generated by <paramref name="predicate"/> using values of <paramref name="source"/>..
            </summary>
            <typeparam name="TSource"><see cref="T:System.Type"/> of source.</typeparam>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <param name="source"><see cref="T:System.Tuple`2"/>s used to generate the <see cref="T:System.Linq.ILookup`2"/>.</param>
            <param name="predicate">Generate <see cref="T:System.Tuple`2"/> from values of <paramref name="source"/>.</param>
            <returns><see cref="T:System.Linq.ILookup`2"/> from <paramref name="source"/> generated by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.IEnumerableToExtensions.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.ValueTuple{``1,``2}})">
            <summary>
            Create a <see cref="T:System.Linq.ILookup`2"/> from the <see cref="T:System.ValueTuple`2"/> generated by <paramref name="predicate"/> using values of <paramref name="source"/>..
            </summary>
            <typeparam name="TSource"><see cref="T:System.Type"/> of source.</typeparam>
            <typeparam name="TKey"><see cref="T:System.Type"/> of key.</typeparam>
            <param name="source"><see cref="T:System.ValueTuple`2"/>s used to generate the <see cref="T:System.Linq.ILookup`2"/>.</param>
            <param name="predicate">Generate <see cref="T:System.ValueTuple`2"/> from values of <paramref name="source"/>.</param>
            <returns><see cref="T:System.Linq.ILookup`2"/> from <paramref name="source"/> generated by <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.OthersExtensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstruction of <seealso cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
        </member>
        <member name="M:Enderlook.Extensions.AssemblyExtensions.GetReferencedAssemblyNamesRecursive(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName}@,System.Collections.Generic.IEnumerable{System.Reflection.AssemblyName}@)">
            <summary>
            Get the name of all referenced assemblies recursively.
            </summary>
            <param name="assembly">Root <see cref="T:System.Reflection.Assembly"/>.</param>
            <param name="references">Referenced <see cref="T:System.Reflection.AssemblyName"/>.</param>
            <param name="errors"><see cref="T:System.Reflection.AssemblyName"/> which could not be loaded.</param>
            <returns>Whenever all <see cref="T:System.Reflection.AssemblyName"/> could be loaded without error.</returns>
        </member>
        <member name="M:Enderlook.Extensions.AssemblyExtensions.GetLoadableTypes(System.Reflection.Assembly)">
            <summary>
            Get all <see cref="T:System.Type"/>s from <paramref name="assembly"/> that doesn't produce error from <see cref="T:System.Reflection.ReflectionTypeLoadException"/>.
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> where <see cref="T:System.Type"/>s are get.</param>
            <returns><see cref="T:System.Type"/>s that could be loaded.</returns>
        </member>
        <member name="M:Enderlook.Extensions.AssemblyExtensions.TryGetTypes(System.Reflection.Assembly,System.Collections.Generic.IEnumerable{System.Type}@,System.Exception[]@)">
            <summary>
            Try get all <see cref="T:System.Type"/>s from <paramref name="assembly"/>.
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/> where <see cref="T:System.Type"/>s are get.</param>
            <param name="loadedTypes"><see cref="T:System.Type"/>s that could be loaded.</param>
            <param name="exceptions"><see cref="T:System.Exception"/>s raised while getting types.</param>
            <returns>Whenever it could get all types without error or there were errors.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetValueFromFirstMember``1(System.Object,System.String)">
            <summary>
            Returns the value of the first member of <see cref="!:obj"/> which:
            <list type="bullet">
                <item><description>If <see cref="T:System.Reflection.MethodInfo"/>, its <see cref="P:System.Reflection.MethodInfo.ReturnType"/> must be <typeparamref name="T"/> and it must not require mandatory parameters (can have optionals or params).</description></item>
                <item><description>If <see cref="T:System.Reflection.PropertyInfo"/>, its <see cref="P:System.Reflection.PropertyInfo.PropertyType"/> must be <typeparamref name="T"/> and it must have a setter.</description></item>
                <item><description>If <see cref="T:System.Reflection.FieldInfo"/>, its <see cref="P:System.Reflection.FieldInfo.FieldType"/> must be <typeparamref name="T"/>.</description></item>
            </list>
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="obj">Object to look for <see cref="T:System.Reflection.MemberInfo"/> and results.</param>
            <param name="memberName">Name of the <see cref="T:System.Reflection.MemberInfo"/> looked for.</param>
            <returns>Result of the first <see cref="T:System.Reflection.MemberInfo"/> of <see cref="!:ojb"/> in match the criteria.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="obj"/> or <paramref name="memberName"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="memberName"/> is empty.</exception>
            <exception cref="T:Enderlook.Extensions.MemberNotFoundException">Thrown no <see cref="T:System.Reflection.MemberInfo"/> with name <paramref name="memberName"/> could be found in <paramref name="obj"/>.</exception>
            <exception cref="T:Enderlook.Extensions.MatchingMemberNotFoundException">Thrown no <see cref="T:System.Reflection.MemberInfo"/> with name <paramref name="memberName"/> in <paramref name="obj"/> matched the necessary requirements.</exception>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetFirstMemberInfoInMatchReturn``1(System.Type,System.String)">
            <summary>
            Returns the first member of <see cref="!:obj"/> which:
            <list type="bullet">
                <item><description>If <see cref="T:System.Reflection.MethodInfo"/>, its <see cref="P:System.Reflection.MethodInfo.ReturnType"/> must be <typeparamref name="T"/> and it must not require mandatory parameters (can have optionals or params).</description></item>
                <item><description>If <see cref="T:System.Reflection.PropertyInfo"/>, its <see cref="P:System.Reflection.PropertyInfo.PropertyType"/> must be <typeparamref name="T"/> and it must have a setter.</description></item>
                <item><description>If <see cref="T:System.Reflection.FieldInfo"/>, its <see cref="P:System.Reflection.FieldInfo.FieldType"/> must be <typeparamref name="T"/>.</description></item>
            </list>
            <see cref="T:System.Reflection.PropertyInfo"/> are always returned as <see cref="T:System.Reflection.MethodInfo"/> because it returns their getter.
            </summary>
            <typeparam name="T">Result type.</typeparam>
            <param name="type">Type to look for <see cref="T:System.Reflection.MemberInfo"/> and results.</param>
            <param name="memberName">Name of the <see cref="T:System.Reflection.MemberInfo"/> looked for.</param>
            <returns>Result of the first <see cref="T:System.Reflection.MemberInfo"/> of <see cref="!:ojb"/> in match the criteria.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type"/> or <paramref name="memberName"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="memberName"/> is empty.</exception>
            <exception cref="T:Enderlook.Extensions.MemberNotFoundException">Thrown no <see cref="T:System.Reflection.MemberInfo"/> with name <paramref name="memberName"/> could be found in <paramref name="obj"/>.</exception>
            <exception cref="T:Enderlook.Extensions.MatchingMemberNotFoundException">Thrown no <see cref="T:System.Reflection.MemberInfo"/> with name <paramref name="memberName"/> in <paramref name="obj"/> matched the necessary requirements.</exception>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetFirstMemberInfoInMatchReturn``2(System.String)">
            <summary>
            Returns the first member of <see cref="!:obj"/> which:
            <list type="bullet">
                <item><description>If <see cref="T:System.Reflection.MethodInfo"/>, its <see cref="P:System.Reflection.MethodInfo.ReturnType"/> must be <typeparamref name="T"/> and it must not require mandatory parameters (can have optionals or params).</description></item>
                <item><description>If <see cref="T:System.Reflection.PropertyInfo"/>, its <see cref="P:System.Reflection.PropertyInfo.PropertyType"/> must be <typeparamref name="T"/> and it must have a setter.</description></item>
                <item><description>If <see cref="T:System.Reflection.FieldInfo"/>, its <see cref="P:System.Reflection.FieldInfo.FieldType"/> must be <typeparamref name="T"/>.</description></item>
            </list>
            <see cref="T:System.Reflection.PropertyInfo"/> are always returned as <see cref="T:System.Reflection.MethodInfo"/> because it returns their getter.
            </summary>
            <typeparam name="T">Type to look for <see cref="T:System.Reflection.MemberInfo"/> and results.</typeparam>
            <typeparam name="U">Result type.</typeparam>
            <param name="memberName">Name of the <see cref="T:System.Reflection.MemberInfo"/> looked for.</param>
            <returns>Result of the first <see cref="T:System.Reflection.MemberInfo"/> of <see cref="!:ojb"/> in match the criteria.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="type"/> or <paramref name="memberName"/> are <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="memberName"/> is empty.</exception>
            <exception cref="T:Enderlook.Extensions.MemberNotFoundException">Thrown no <see cref="T:System.Reflection.MemberInfo"/> with name <paramref name="memberName"/> could be found in <paramref name="obj"/>.</exception>
            <exception cref="T:Enderlook.Extensions.MatchingMemberNotFoundException">Thrown no <see cref="T:System.Reflection.MemberInfo"/> with name <paramref name="memberName"/> in <paramref name="obj"/> matched the necessary requirements.</exception>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.Invoke(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invokes <paramref name="methodInfo"/> using <paramref name="obj"/> has it class instance and without any parameter (expect optionals).
            </summary>
            <param name="methodInfo">Method to invoke.</param>
            <param name="obj">Instance of the class to invoke.</param>
            <returns>Result of the method invoked.</returns>
            <exception cref="T:System.ArgumentNullException">Throw when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.HasNoMandatoryParameters(System.Reflection.MethodInfo)">
            <summary>
            Return if the <paramref name="methodInfo"/> only has optional or params parameters.
            </summary>
            <param name="methodInfo">Method to check.</param>
            <returns>Whenever it only has optional or params parameters.</returns>
            <see cref="!:https://stackoverflow.com/a/627668/7655838"/>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.HasNoMandatoryParameters(System.Reflection.MethodInfo,System.Object[]@)">
            <summary>
            Return if the <paramref name="methodInfo"/> only has optional or params parameters.
            </summary>
            <param name="methodInfo">Method to check.</param>
            <param name="parameters">Array with default parameters to invoke.</param>
            <returns>Whenever it only has optional or params parameters.</returns>
            <see cref="!:https://stackoverflow.com/a/627668/7655838"/>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.IsOptionalOrParam(System.Reflection.ParameterInfo)">
            <summary>
            Determines if the <paramref name="parameterInfo"/> is optional or param, or not.
            </summary>
            <param name="parameterInfo"><paramref name="parameterInfo"/> to check.</param>
            <returns>Whenever it's optional or para, or if it's neither of them.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.IsOptionalOrParam(System.Reflection.ParameterInfo,System.Object@)">
            <summary>
            Determines if the <paramref name="parameterInfo"/> is optional or param, or not.
            </summary>
            <param name="parameterInfo"><paramref name="parameterInfo"/> to check.</param>
            <param name="parameter">Parameter that should by passed to an invoker if the method returns <see langword="true"/>.</param>
            <returns>Whenever it's optional or para, or if it's neither of them.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetDefault(System.Reflection.TypeInfo)">
            <summary>
            Get default value of the given <see cref="T:System.Reflection.TypeInfo"/> <see cref="M:System.Reflection.TypeInfo.AsType"/>.
            </summary>
            <param name="typeInfo"><see cref="T:System.Reflection.TypeInfo"/> to get default value.</param>
            <returns>Default value of <see cref="T:System.Reflection.TypeInfo"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetDefault(System.Type)">
            <summary>
            Get default value of the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to get default value.</param>
            <returns>Default value of <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetBackingFieldName(System.String)">
            <summary>
            Get the name of the backing field of a property.
            </summary>
            <param name="nameOfProperty">Name of the property.</param>
            <returns>Name of the backing field.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetPropertyNameOfBackingField(System.String)">
            <summary>
            Get the name of the property of a backing field;
            </summary>
            <param name="backingFieldName">Name of the backing field.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.IsArrayOrList(System.Type)">
            <summary>
            Determines if <paramref name="type"/> is an array or a <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to check.</param>
            <returns>Whenever it's an array or <see cref="T:System.Collections.Generic.List`1"/>, or if not.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.GetElementTypeOfArrayOrList(System.Type)">
            <summary>
            Get the element <see cref="T:System.Type"/> of the array or list <see cref="T:System.Type"/> <paramref name="type"/>.
            </summary>
            <param name="type"><see cref="T:System.Type"/> of array or list.</param>
            <returns>Element <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="type"/> isn't array nor a concrete <see cref="T:System.Type"/> of <see cref="T:System.Collections.Generic.List`1"/>.</exception>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionExtesions.TryGetElementTypeOfArrayOrList(System.Type,System.Type@)">
            <summary>
            Try get element <see cref="T:System.Type"/> of <paramref name="type"/> if it is an array or list.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to check.</param>
            <param name="elementType">Element <see cref="T:System.Type"/> of <paramref name="type"/>, if returns <see langword="true"/>.</param>
            <returns>Whenever it could get the element <see cref="T:System.Type"/> or not (because it wasn't an array nor a concrete <see cref="T:System.Type"/> of <see cref="T:System.Collections.Generic.List`1"/>).</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionInheritedExtensions.GetInheritedField(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the field <paramref name="name"/> recursively through the inheritance hierarchy of <paramref name="source"/>.
            </summary>
            <param name="source">Initial <see cref="T:System.Type"/> used to get the field.</param>
            <param name="name">Name of the field to get.</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> used to get the field.</param>
            <returns>The first field which match the name <paramref name="name"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionInheritedExtensions.GetInheritedProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the property <paramref name="name"/> recursively through the inheritance hierarchy of <paramref name="source"/>.
            </summary>
            <param name="source">Initial <see cref="T:System.Type"/> used to get the property.</param>
            <param name="name">Name of the property to get.</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> used to get the property.</param>
            <returns>The first property which match the name <paramref name="name"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.ReflectionInheritedExtensions.GetInheritedMethod(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the method <paramref name="name"/> recursively through the inheritance hierarchy of <paramref name="source"/>.
            </summary>
            <param name="source">Initial <see cref="T:System.Type"/> used to get the method.</param>
            <param name="name">Name of the method to get.</param>
            <param name="bindingFlags"><see cref="T:System.Reflection.BindingFlags"/> used to get the method.</param>
            <returns>The first method which match the name <paramref name="name"/>.</returns>
        </member>
        <member name="M:Enderlook.Extensions.StringExtensions.FirstCharToUpper(System.String)">
            <summary>
            Convert the first character of the string to uppercase.
            </summary>
            <param name="source">String to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Enderlook.Extensions.StringExtensions.FirstCharToLower(System.String)">
            <summary>
            Convert the first character of the string to lowercase.
            </summary>
            <param name="source">String to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Enderlook.Extensions.StringExtensions.ToSentenceCase(System.String)">
            <summary>
            Convert the string to sentence case. Remove all uppercases but add uppercase to the first character.
            </summary>
            <param name="source">String to convert.</param>
            <returns>Converted string.</returns>
            <example>the Quick Brown Fox Jumps Over The Lazy Dog. -> The quick brown fox jumps over the lazy dog.</example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.SplitByCamelCase(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.SplitByPascalCase(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.SplitByTitleCase(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.SplitBySnakeCase(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.SplitByKebabCase(System.String,System.Boolean)" -->
        <member name="M:Enderlook.Extensions.StringExtensions.ToCapitalWords(System.String)">
            <summary>
            Capitalize each word delimited by whitespace
            </summary>
            <param name="source">String to convert.</param>
            <returns>Converted string.</returns>
            <example>the quick brown fox jumps over the lazy dog ->  The Quick Brown Fox Jumps Over The Lazy Dog</example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.ToPascalCase(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.ToTitleCase(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Enderlook.Extensions.StringExtensions.ToCamelCase(System.String)" -->
        <member name="M:Enderlook.Extensions.StringExtensions.ToSnakeCase(System.String)">
            <summary>
            Convert to lowercase and join each word delimited by whitespace with underscores.
            </summary>
            <param name="source">String to convert.</param>
            <returns>Converted string.</returns>
            <example>Snake Case -> snake_case</example>
        </member>
        <member name="M:Enderlook.Extensions.StringExtensions.ToKebabCase(System.String)">
            <summary>
            Convert to lowercase and join each word delimited by whitespace with underscores.
            </summary>
            <param name="source">String to convert.</param>
            <returns>Converted string.</returns>
            <example>Kebab Case -> kebab-case</example>
        </member>
    </members>
</doc>
