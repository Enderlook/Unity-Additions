<#+
    void WriteTransformerGroup(string name, string dataType)
    {
        WriteHeader();
#>
using Enderlook.Extensions;

using System.Collections.Generic;

using UnityEngine;
<#+
        WriteNamespace();
#>
    [CreateAssetMenu(fileName = "<#= name #>TransformerGroup", menuName = "<#= menuPath #>Functions/Groups/<#= name #>")]
    public class <#= name #>TransformerGroup : <#= name #>Transformer
    {
        [SerializeField, Tooltip("In order sequence of functions to execute.")]
        private List<<#= name #>TransformerFunction> functions;

        /// <summary>
        <#= "///" #> Execute all the <see cref="<#= name #>Function"/> from <see cref="functions"/>.</br>
        /// In addition, it removes any <see langword="null"/> element from <see cref="functions"/>.
        /// </summary>
        /// <param name="value">Value passed to first function to execute.</param>
        /// <returns>Result of last function.</returns>
        public override <#= dataType #> Transform(<#= dataType #> value)
        {
            if (functions.Count == 0)
                return value;

            List<int> indexes = null;
            for (int i = 0; i < functions.Count; i++)
            {
                var transformer = functions[i];

                if (transformer == null)
                    (indexes ?? (indexes = new List<int>())).Add(i);
                else
                    value = transformer.Transform(value);
            }

            if (!(indexes is null))
                functions.RemoveAtOrdered(indexes);

            return value;
        }

        /// <summary>
        /// Create a new <see cref="IntFunctionChain"/> with the given functions in <paramref name="functions"/>.
        /// </summary>
        /// <param name="functions">Functions executed in order by the new <see cref="IntFunctionChain"/>.</param>
        /// <returns>New instance of <see cref="IntFunctionChain"/>.</returns>
        public static <#= name #>TransformerGroup CreateFunctionChain(params <#= name #>TransformerFunction[] functions)
        {
            var instance = CreateInstance<<#= name #>TransformerGroup>();
            if (functions == null || functions.Length == 0)
                return instance;
            var _functions = new List<<#= name #>TransformerFunction>();
            for (int i = 0; i < functions.Length; i++)
            {
                var function = functions[i];
                if (!(function == null))
                    _functions.Add(function);
            }
            instance.functions = _functions;
            return instance;
        }
    }
<#+
        SaveOutput(name + "TransformerGroup", "Transformers");
    }
#>