<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
    void WriteHeader()
    {
#>
//====================================================================================================
//                      THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY
//====================================================================================================
using Enderlook.Unity.Attributes;
using Enderlook.Unity.Interfaces;

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

using UnityEngine;
using UnityObject = UnityEngine.Object;

namespace Enderlook.Unity.Atoms
{
<#+
    }

    const string menuName = "Enderlook/Atoms";

    string AtomGetName(string name)
    {
        return name + "Get";
    }

    string AtomGetAdapterName(string name)
    {
        return name + "GetAdapter";
    }

    string AtomConstantName(string name)
    {
        return name + "Constant";
    }

    string AtomGetSetName(string name)
    {
        return name + "GetSet";
    }

    string AtomGetSetAdapterName(string name)
    {
        return name + "GetSetAdapter";
    }
    string AtomVariableName(string name)
    {
        return name + "Variable";
    }

    string InterfaceGetName(string name)
    {
        return "I" + name + "Get";
    }

    string InterfaceGetSetName(string name)
    {
        return "I" + name + "Set";
    }

    void SaveOutput(string fileName, string path)
    {
#>
}
<#+
        path = "Atoms/" + path;
        fileName += ".autogenerated.cs";
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, path);
        if (!string.IsNullOrEmpty(path))
            Directory.CreateDirectory(outputFilePath);
        outputFilePath = Path.Combine(outputFilePath, fileName);
        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }
#>