<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
    void GenerateAtomVariable(string name, string dataType)
    {
        string atomVariable = AtomVariableName(name);
        string atomGetSet = AtomGetSetName(name);

        WriteHeader();
#>
    [Serializable]
    [CreateAssetMenu(fileName = "<#= atomVariable #>", menuName = "<#= menuName #>/Variables/Variables/<#= name #>")]
    public class <#= atomVariable #> : <#= atomGetSet #>
    {
        [SerializeField, Tooltip("Value stored in this atom.")]
        protected <#= dataType #> value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override <#= dataType #> GetValue() => value;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override void SetValue(<#= dataType #> value) => this.value = value;

        /// <summary>
        <#= "///" #> Create new <see cref="<#= atomVariable #>"/> with given value.
        /// </summary>
        <#= "///" #> <param name="value">Value of new <see cref="<#= atomVariable #>"/>.</param>
        <#= "///" #> <returns>New <see cref="<#= atomVariable #>"/>.</returns>
        public static <#= atomVariable #> CreateConstant(<#= dataType #> value)
        {
            <#= atomVariable #> atom = CreateInstance<<#= atomVariable #>>();
            atom.value = value;
            return atom;
        }
    }
<#+
        SaveOutput(name + "Variable", name);
    }
#>