<#+
    void WriteScriptableObjects(string name, string dataType)
    {
        WriteHeader();
#>
using System;
using System.Runtime.CompilerServices;

using UnityEngine; // Used for atoms with Unity data types
<#+
        WriteNamespace();
#>
    public abstract class <#= name #>GetSO : GetSO<<#= dataType #>>, I<#= name #>Get { }

    public abstract class <#= name #>GetSetSO : <#= name #>GetSO, I<#= name #>GetSet
    {
        /// <inheritdoc cref="IGetSet{TValue}.SetValue(TValue)"/>
        public abstract void SetValue(<#= dataType #> newValue);

        /// <summary>
        /// Create a deep prototype of this current instance.
        /// </summary>
        /// <returns>A deep prototype of this current instance.</returns>
        public abstract <#= name #>GetSetSO CreateGetSetPrototype();
    }

    public abstract class <#= name #>ManagedSO : <#= name #>GetSetSO, I<#= name #>Managed
    {
        /// <summary>
        /// Event raised when value is changed. The parameter is the new value.
        /// </summary>
        protected abstract IEventRegister<<#= dataType #>> Changed { get; }

        /// <summary>
        /// Event raised when value is changed. The first parameter is the new value, the second parameter is the old value.
        /// </summary>
        protected abstract IEventRegister2<<#= dataType #>> ChangedWithHistory { get; }

        /// <inheritdoc cref="IManaged{T}.InitialValue" />
        public abstract <#= dataType #> InitialValue { get; }

#pragma warning disable CS1591
        public void OnEnable() => SetValueInternal(InitialValue);
#pragma warning restore CS1591

        /// <inheritdoc cref="IManaged{TValue}.Reset(bool)"/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Reset(bool shouldTriggerEvents = false)
        {
            if (shouldTriggerEvents)
                SetValueInternal(InitialValue);
            else
                SetValue(InitialValue);
        }

        /// <inheritdoc cref="IManaged{T}" />
        protected abstract void SetValueInternal(<#= dataType #> newValue);

        /// <inheritdoc cref="IManaged{T}" />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override void SetValue(<#= dataType #> newValue) => SetValueInternal(newValue);

        /// <summary>
        /// Create a deep prototype of this current instance.
        /// </summary>
        /// <returns>A deep prototype of this current instance.</returns>
        public abstract <#= name #>ManagedSO CreateManagedPrototype();

        /// <inheritdoc />
        public override sealed <#= name #>GetSetSO CreateGetSetPrototype() => CreateManagedPrototype();

        /// <inheritdoc cref="IEventRegister{TValue}.Register(Action{TValue})"/>
        void IEventRegister<<#= dataType #>>.Register(Action<<#= dataType #>> action) => Changed.Register(action);

        /// <inheritdoc cref="IEventRegister{TValue}.Unregister(Action{TValue})"/>
        void IEventRegister<<#= dataType #>>.Unregister(Action<<#= dataType #>> action) => Changed.Unregister(action);

        /// <inheritdoc cref="IEventRegister{TValue}.RegisterListener(IEventListener{TValue})"/>
        void IEventRegister<<#= dataType #>>.RegisterListener(IEventListener<<#= dataType #>> listener) => Changed.RegisterListener(listener);

        /// <inheritdoc cref="IEventRegister{TValue}.RegisterListener(IEventListener{TValue})"/>
        void IEventRegister<<#= dataType #>>.UnregisterListener(IEventListener<<#= dataType #>> listener) => Changed.UnregisterListener(listener);

        /// <inheritdoc cref="IEventRegister2{TValue}.Register(Action{TValue, TValue})"/>
        void IEventRegister2<<#= dataType #>>.Register(Action<<#= dataType #>, <#= dataType #>> action) => ChangedWithHistory.Register(action);

        /// <inheritdoc cref="IEventRegister2{TValue}.Unregister(Action{TValue, TValue})"/>
        void IEventRegister2<<#= dataType #>>.Unregister(Action<<#= dataType #>, <#= dataType #>> action) => ChangedWithHistory.Unregister(action);

        /// <inheritdoc cref="IEventRegister2{TValue}.RegisterListener(IEventListener2{TValue})"/>
        void IEventRegister2<<#= dataType #>>.RegisterListener(IEventListener2<<#= dataType #>> listener) => ChangedWithHistory.RegisterListener(listener);

        /// <inheritdoc cref="IEventRegister2{TValue}.UnregisterListener(IEventListener2{TValue})"/>
        void IEventRegister2<<#= dataType #>>.UnregisterListener(IEventListener2<<#= dataType #>> listener) => ChangedWithHistory.UnregisterListener(listener);
    }
<#+
        SaveOutput(name + "ScriptableObjects", "Values/Bases");
    }
#>