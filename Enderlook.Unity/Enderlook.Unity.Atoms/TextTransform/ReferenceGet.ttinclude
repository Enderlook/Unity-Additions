<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
    void GenerateReferenceGet(string name, string dataType)
    {
        string referenceGet = ReferenceGetName(name);
        string interfaceGet = InterfaceGetName(name);
        string atomGet = AtomGetName(name);

        WriteHeader();
#>
    [Serializable]
    public class <#= referenceGet #> : Reference, <#= interfaceGet #>
    {
        [SerializeField]
        private <#= dataType #> inlineValue;

        [SerializeField]
        private <#= atomGet #> scriptableObjectValue;

        [SerializeField, RestrictType(typeof(IGet<<#= dataType #>>))]
#pragma warning disable CA2235
        private UnityObject unityObjectValue;
#pragma warning restore CA2235

        private IGet<<#= dataType #>> unityObjectGetter;

        private <#= dataType #> UnityObjectValue {
            get {
                if (unityObjectGetter == null)
                    unityObjectGetter = (IGet<<#= dataType #>>)unityObjectValue;
                return unityObjectGetter.GetValue();
            }
        }

        public <#= dataType #> GetValue()
        {
            switch (Mode)
            {
                case ReferenceMode.Value:
                    return inlineValue;
                case ReferenceMode.ScriptableObject:
                    return scriptableObjectValue.GetValue();
                case ReferenceMode.Other:
                    return UnityObjectValue;
                default:
                    throw new ImpossibleStateException();
            }
        }
    }
<#+
        SaveOutput(name + "ReferenceGet", name);
    }
#>