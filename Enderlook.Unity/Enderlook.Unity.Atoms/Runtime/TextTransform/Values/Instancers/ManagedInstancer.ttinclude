<#+
    void WriteManagedInstancer(string name, string dataType)
    {
        WriteHeader();
#>
using Enderlook.Unity.Attributes;

using System.Runtime.CompilerServices;

using UnityEngine;
<#+
        WriteNamespace();
#>
    [AddComponentMenu("<#= menuPath #>Instancers/<#= name #>ManagedInstancer")]
    [DefaultExecutionOrder(AtomsInternal.ExecutionOrder.VARIABLE_INSTANCER)]
    public class <#= name #>ManagedInstancer : <#= name #>ManagedComponent
    {
        [SerializeField, Tooltip("Variable template to instance.")]
        private <#= name #>ManagedSO baseAtom;

        [SerializeField, ReadOnly]
        private <#= name #>ManagedSO instacedAtom;

        /// <inheritdoc />
        public override <#= dataType#> InitialValue {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => instacedAtom.InitialValue;
        }

        /// <inheritdoc />
        protected override IEventRegister<<#= dataType#>> Changed {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => instacedAtom;
        }

        /// <inheritdoc />
        protected override IEventRegister2<<#= dataType#>> ChangedWithHistory {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get => instacedAtom;
        }

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override <#= dataType#> GetValue() => instacedAtom.GetValue();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override void Reset(bool shouldTriggerEvents = false) => instacedAtom.Reset();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override void SetValue(<#= dataType#> newValue) => instacedAtom.SetValue(newValue);

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Code Quality", "IDE0051:Remove unused private members", Justification = "Used by Unity.")]
        protected override void OnEnable()
        {
            instacedAtom = baseAtom.CreateManagedPrototype();
            base.OnEnable();
        }
    }
<#+
        SaveOutput(name + "ManagedInstancer", "Values/Instancers");
    }
#>