<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogenerated.cs" #>
//====================================================================================================
// <auto-generated>       THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY       </auto-generated>
//====================================================================================================

using Enderlook.Exceptions;
using Enderlook.Unity.Attributes;
using Enderlook.Unity.Attributes.AttributeUsage;

using System;

using UnityEngine;

namespace Enderlook.Unity.Serializables
{
<#
    for (int i = 2; i < 5; i++)
    {
        IEnumerable<int> range = Enumerable.Range(1, i);
#>
    [Serializable]
    public abstract class DerivedSwitch<I, <#= string.Join(", ", range.Select(e => "T" + e.ToString())) #>> : DerivedSwitch<I> <#= string.Join(" ", range.Select(e => "where T" + e.ToString() + " : I")) #>
    {
#pragma warning disable CS0649
<#
        for (int j = 1; j <= i; j++)
        {
#>
        [SerializeField, PropertyPopupOption(<#= j #>), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T<#= j #> item<#= j #>;

<#      } #>
#pragma warning restore CS0649
		
        /// <inheritdoc cref="DerivedSwitch{I}.GetValue"/>
        public sealed override I GetValue()
        {
            switch (Mode)
            {
<#
        for (int j = 1; j <= i; j++)
        {
#>
                case <#= j #>:
                    return item<#= j #>;
<#      } #>
                default:
                    throw new ImpossibleStateException();
            }
        }
    }

<#  }#>
}