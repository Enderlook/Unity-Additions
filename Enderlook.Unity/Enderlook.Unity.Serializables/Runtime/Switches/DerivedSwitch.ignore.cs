//====================================================================================================
// <auto-generated>       THIS IS AN AUTOGENERATED FILE. DO NOT EDIT MANUALLY       </auto-generated>
//====================================================================================================

using Enderlook.Unity.Attributes;
using Enderlook.Unity.Attributes.AttributeUsage;
using Enderlook.Utils.Exceptions;

using System;

using UnityEngine;

namespace Enderlook.Unity.Serializables
{
    [Serializable]
    public abstract class DerivedSwitch<I, T1, T2> : DerivedSwitch<I> where T1 : I where T2 : I
    {
        [SerializeField, PropertyPopupOption(1), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T1 item1;

        [SerializeField, PropertyPopupOption(2), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T2 item2;

        /// <inheritdoc cref="DerivedSwitch{I}.GetValue"/>
        public sealed override I GetValue()
        {
            switch (Mode)
            {
                case 1:
                    return item1;
                case 2:
                    return item2;
                default:
                    throw new ImpossibleStateException();
            }
        }
    }

    [Serializable]
    public abstract class DerivedSwitch<I, T1, T2, T3> : DerivedSwitch<I> where T1 : I where T2 : I where T3 : I
    {
        [SerializeField, PropertyPopupOption(1), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T1 item1;

        [SerializeField, PropertyPopupOption(2), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T2 item2;

        [SerializeField, PropertyPopupOption(3), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T3 item3;

        /// <inheritdoc cref="DerivedSwitch{I}.GetValue"/>
        public sealed override I GetValue()
        {
            switch (Mode)
            {
                case 1:
                    return item1;
                case 2:
                    return item2;
                case 3:
                    return item3;
                default:
                    throw new ImpossibleStateException();
            }
        }
    }

    [Serializable]
    public abstract class DerivedSwitch<I, T1, T2, T3, T4> : DerivedSwitch<I> where T1 : I where T2 : I where T3 : I where T4 : I
    {
        [SerializeField, PropertyPopupOption(1), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T1 item1;

        [SerializeField, PropertyPopupOption(2), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T2 item2;

        [SerializeField, PropertyPopupOption(3), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T3 item3;

        [SerializeField, PropertyPopupOption(4), DoNotCheck(typeof(PropertyPopupOptionAttribute))]
        private T4 item4;

        /// <inheritdoc cref="DerivedSwitch{I}.GetValue"/>
        public sealed override I GetValue()
        {
            switch (Mode)
            {
                case 1:
                    return item1;
                case 2:
                    return item2;
                case 3:
                    return item3;
                case 4:
                    return item4;
                default:
                    throw new ImpossibleStateException();
            }
        }
    }

}